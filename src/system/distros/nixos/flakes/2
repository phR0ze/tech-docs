# Flakes
***Flakes*** are a best practice in the NixOS community. They are installable units of configuration 
that may include files, configs, packages, dependencies or other flakes. You can think about them 
like a package, but the Nix ecosystem already has a package type so they had to use another term. 
They simplify usability and improve reproducibility through better dependency managment than legacy 
methods. Despite having yet to shed the experimental label, `Flakes` are considered the best practice 
in the Nix community. Other methods are considered legacy. 

**Key Points**
* Using flakes for your NixOS system configuration actually delivers on NixOS's claim to be:
  * ***Reproducible*** - the entire system configuration including everything it depends on is captured 
  by the flake and its lock file. So if two people check out the same Git revision of a flake and build 
  it, they should get the same result. This `deprecates the channel paradigm`.
  * ***Traceable*** - `nixos-version` will print the Git revision of the top-level configuration 
  flake giving you the full trace.
  * ***Composable*** - its easy to pull in packages and modules from other repositories as flake 
  inputs that are not in Nixpkgs
* `Installation` describes one or more flake installs that may or may not depend on each other
* Flakes are modern and usually hosted in GitHub or other git repos
* A flake refers to a file-system tree whose directory contains a `flake.nix`
* The contents of `flake.nix` follows the same Nix Expression Language as other parts of Nix
* Flakes also provide the ability to simplify URL syntax via a symbolic identifier registry
* Flakes allow for locking references and versions that can then be easily queried and updated
* Flakes are fully integrated with the Nix CLI

### Quick links
* [Overview](#overview)
  * [Lock file](#lock-file)
* [Composition](#composition)

## Overview
Nix introduced the `nix-command` and `flakes` features in 2020 and are considered the New CLI for 
nix.

Flakes and new cli deprecate the following legacy features:
* `nix-channel` is replaced with the `inputs` section of `flake.nix`
* `nix-env`
* `nix-shell` is replaced with `nix run`
* `nix-build` is replaced with `nix build`

* [FlakesHub](https://flakehub.com/)
* [NixOS and Flakes book](https://nixos-and-flakes.thiscute.world/best-practices/run-downloaded-binaries-on-nixos)
* [Flakes wiki](https://nixos.wiki/wiki/Flakes)
* [Cache builds with Cachix](https://docs.cachix.org/)
* [Flakes with NixOS](https://www.tweag.io/blog/2020-07-31-nixos-flakes/)
* [NixOS Modules](https://nixos.wiki/wiki/NixOS_modules)
* [Nixos flakes guide](https://nixos-and-flakes.thiscute.world/nixos-with-flakes/introduction-to-flakes)
* [Convert to flakes](https://nixos.asia/en/nixos-install-flake)

### Lock file
Flakes introduce the `flake.nix` and the `flack.lock` similar to other programming languages to 
describe dependencies and versions to ensure your project can be reproduced.

### Basic flake commands
* `nix flake show templates`
* `nix flake init -t templates#full`

### Enabling flakes temporarily
```bash
$ nix --extra-experimental-features 'nix-command flakes' flake show .
```

### Install from flake
```bash
$ sudo nixos-install --no-root-passwd --impure --flake .#nixos
```

## Composition

## NixOS Modular Configuration
By using flakes for the NixOS system configuration we solve the legacy issues with NixOS's channel 
system, namely flakes gives us a lock file for true reproducibility.

* [Nix Language](https://nixos.org/manual/nix/stable/language/index.html)
* [Stylix](https://github.com/danth/stylix#readme)
* [Example modular breakout](https://github.com/librephoenix/nixos-config)
* [NixOS profiles](https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/minimal.nix)

### Install from minimal ISO with flakes
1. Boot from NixOS ISO
2. Run clu which will parition the drive and generate the hardware config
3. Copy the `/mnt/etc/nixos/hardward-configuration.nix` to your flake
4. Install: `sudo nixos-install --no-root-passwd --impure --flake .#nixos`

<!-- 
vim: ts=2:sw=2:sts=2
-->
